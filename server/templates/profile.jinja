{% extends 'base.jinja' %}

{% block title %}
Your Profile
{% endblock title %}

{% block content %}
<!-- Hero Section -->
<section class="bg-gradient-to-r from-secondary to-primary py-20"> <!-- Gradient background -->
    <div class="max-w-7xl mx-auto px-4 py-12 sm:py-16 sm:px-6 lg:px-8 text-center">
        <div class="mb-8">
            {# TODO: change img url to user image #}
            <img src="https://plus.unsplash.com/premium_photo-1723478515704-629ab1575612?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
                alt="User Avatar" class="rounded-full mx-auto h-24 w-24 border-4 border-white shadow-md object-cover">
            <!-- Avatar Placeholder -->
        </div>
        <h1 class="text-4xl font-extrabold text-white sm:text-5xl lg:text-6xl tracking-tight mb-4">
            <!-- Larger, bolder title -->
            Welcome, <span id="profile-name" class="font-accent font-semibold">{{user.first_name}}</span>
        </h1>
        <p class="mt-4 max-w-3xl mx-auto text-xl text-gray-100"> <!-- More descriptive tagline -->
            Explore your personalized food profile and manage your health preferences. Let's make healthy eating
            easier!
        </p>
    </div>
</section>

<!-- Edit Profile Button - Add this above the profile details section -->
<div class="container mx-auto px-4 sm:px-6 lg:px-8 py-4 text-center flex justify-center items-center gap-5">
    <button id="edit-profile-button"
        class="bg-secondary hover:bg-primary text-white font-semibold py-2 px-6 rounded-md transition focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-opacity-50">
        <i class="fa-solid fa-pen-to-square mr-2"></i> Edit Profile
        {# TODO: on click open modal to change user details #}
    </button>
    <form method="post" action="{{ url_for('routes_bp.logout') }}">
        <button id="logout-profile-button"
            class="bg-secondary hover:bg-primary text-white font-semibold py-2 px-6 rounded-md transition focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-opacity-50">
            <i class="fa-solid fa-right-from-bracket"></i> Logout
            {# TODO: on click open modal to change user details #}
        </button>
    </form>
</div>

<!-- User Profile Details Section -->
<div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="bg-white rounded-xl shadow-lg overflow-hidden"> <!-- Deeper shadow -->
        <div class="px-6 py-8 lg:p-10">
            <h2 class="text-3xl font-bold text-neutral mb-8 text-center">Your Profile Information</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl max-auto">
                {% set profile_fields_left = [
                ('fa-user-tag', 'Profile Name', 'profile_name_detail', user.profile_name),
                ('fa-user', 'First Name', 'first_name', user.first_name),
                ('fa-user-group', 'Last Name', 'last_name', user.last_name),
                ('fa-venus-mars', 'Gender', 'gender', user.gender),
                ('fa-weight-scale', 'Weight', 'weight', user.weight ~ ' kg')
                ] %}

                {% set profile_fields_right = [
                ('fa-ruler-vertical', 'Height', 'height', user.height ~ ' cm'),
                ('fa-calendar-alt', 'Age', 'age', user.age ~ ' years'),
                ('fa-users', 'User Type', 'user_type', user.user_type),
                ('fa-utensils', 'Diet Type', 'diet_type', user.diet_type)
                ] %}

                <div class="px-2 md:px-6">
                    {% for icon, label, element_id, value in profile_fields_left %}
                    <div class="flex mb-3 pl-16">
                        <i class="fa-solid {{ icon }} text-primary mr-2"></i>
                        <span class="font-semibold text-neutral mr-2">{{ label }}:</span>
                        <span id="{{ element_id }}" class="text-gray-700">{{ value or 'Loading...' }}</span>
                    </div>
                    {% endfor %}
                </div>

                <div class="px-2 md:px-6">
                    {% for icon, label, element_id, value in profile_fields_right %}
                    <div class="flex mb-3 pl-16">
                        <i class="fa-solid {{ icon }} text-primary mr-2"></i>
                        <span class="font-semibold text-neutral mr-2">{{ label }}:</span>
                        <span id="{{ element_id }}" class="text-gray-700">{{ value or 'Loading...' }}</span>
                    </div>
                    {% endfor %}
                </div>
            </div>

            <!-- Allergy and Diseases Sections as Cards -->
            <div class="mt-10 grid grid-cols-1 md:grid-cols-2 gap-6">
                <div id="allergy-info-card" class="bg-light-green rounded-lg p-6 shadow-sm">
                    <h3 class="font-semibold text-xl text-neutral mb-4 pl-12">
                        <i class="fa-solid fa-exclamation-triangle text-red-500 mr-2"></i> Allergies
                    </h3>
                    <ul id="allergy-info-list" class="list-disc list-inside text-red-700 pl-16">
                        {% if user.allergies %}
                        {% for allergy in user.allergies %}
                        <li>{{ allergy }}</li>
                        {% endfor %}
                        {% else %}
                        <li>Missing so, Loading allergy information...</li>
                        {% endif %}
                    </ul>
                </div>

                <div id="diseases-card" class="bg-light-green rounded-lg p-6 shadow-sm">
                    <h3 class="font-semibold text-xl text-neutral mb-4 pl-12">
                        <i class="fa-solid fa-heartbeat text-red-500 mr-2"></i> Diseases
                    </h3>
                    <ul id="diseases-list" class="list-disc list-inside text-red-700 pl-16">
                        {% if user.diseases %}
                        {% for disease in user.diseases %}
                        <li>{{ disease }}</li>
                        {% endfor %}
                        {% else %}
                        <li>Missing so, Loading disease information...</li>
                        {% endif %}
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Profile Modal - Add this after the profile details section -->

{% endblock content %}

{% block scripts %}
<script src="https://kit.fontawesome.com/0340a8219c.js" crossorigin="anonymous"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const urlParams = new URLSearchParams(window.location.search);
        const profileId = urlParams.get('id'); // Get profile ID from query parameter

        if (!profileId) {
            alert('Profile ID is missing in the URL.'); // Basic error handling
            return;
        }

        function fetchUserProfile(profileId) {
            fetch(`/api/profiles/${profileId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(userProfile => {
                    // Populate profile details on the page
                    document.getElementById('profile-name').textContent = userProfile.profile_name || 'N/A';
                    document.getElementById('profile-name-detail').textContent = userProfile.profile_name || 'N/A'; // Added for detail section
                    document.getElementById('first-name').textContent = userProfile.firstName || 'N/A';
                    document.getElementById('last-name').textContent = userProfile.lastName || 'N/A';
                    document.getElementById('gender').textContent = userProfile.gender || 'N/A';
                    document.getElementById('weight').textContent = userProfile.weight || 'N/A';
                    document.getElementById('height').textContent = userProfile.height || 'N/A';
                    document.getElementById('age').textContent = userProfile.age || 'N/A';
                    document.getElementById('user-type').textContent = userProfile.userType || 'N/A';
                    document.getElementById('diet-type').textContent = userProfile.dietType || 'N/A';

                    // Allergy Info List
                    const allergyInfoList = document.getElementById('allergy-info-list');
                    allergyInfoList.innerHTML = ''; // Clear loading text
                    if (userProfile.allergy_info && userProfile.allergy_info.length > 0) {
                        userProfile.allergy_info.forEach(allergy => {
                            const li = document.createElement('li');
                            li.textContent = allergy;
                            allergyInfoList.appendChild(li);
                        });
                    } else {
                        document.getElementById('allergy-info-card').style.display = 'none'; // Hide allergy card if no info
                    }

                    // Diseases List
                    const diseasesList = document.getElementById('diseases-list');
                    diseasesList.innerHTML = ''; // Clear loading text
                    if (userProfile.diseases && userProfile.diseases.length > 0) {
                        userProfile.diseases.forEach(disease => {
                            const li = document.createElement('li');
                            li.textContent = disease;
                            diseasesList.appendChild(li);
                        });
                    } else {
                        document.getElementById('diseases-card').style.display = 'none'; // Hide diseases card if no info
                    }
                    window.userProfile = userProfile; // Make userProfile globally accessible within the scope for populateEditForm

                })
                .catch(error => {
                    console.error('Error fetching profile details:', error);
                    alert('Failed to load profile details.'); // User-friendly error message
                });
        }

        fetchUserProfile(profileId); // Initial fetch of profile data

        const editProfileButton = document.getElementById('edit-profile-button');
        const editProfileModal = document.getElementById('edit-profile-modal');
        const cancelEditButton = document.getElementById('cancel-edit-button');
        const saveProfileButton = document.getElementById('save-profile-button');
        const editProfileForm = document.getElementById('edit-profile-form');

        // Function to open the modal
        editProfileButton.addEventListener('click', () => {
            editProfileModal.classList.remove('hidden'); // Show the modal
            populateEditForm(); // Populate the form with current data
        });

        // Function to close the modal
        function closeModal() {
            editProfileModal.classList.add('hidden'); // Hide the modal
        }

        cancelEditButton.addEventListener('click', closeModal);

        // Close modal if clicked outside the modal panel (optional, but nice UX)
        window.addEventListener('click', (event) => {
            if (event.target === editProfileModal) {
                closeModal();
            }
        });

        // Function to populate the edit form with existing profile data
        function populateEditForm() {
            document.getElementById('edit-profile-name').value = document.getElementById('profile-name-detail').textContent; // Use profile-name-detail from detail section
            document.getElementById('edit-first-name').value = document.getElementById('first-name').textContent;
            document.getElementById('edit-last-name').value = document.getElementById('last-name').textContent;
            document.getElementById('edit-gender').value = document.getElementById('gender').textContent;
            document.getElementById('edit-weight').value = document.getElementById('weight').textContent.replace(' kg', ''); // Remove ' kg'
            document.getElementById('edit-height').value = document.getElementById('height').textContent.replace(' cm', ''); // Remove ' cm'
            document.getElementById('edit-age').value = document.getElementById('age').textContent.replace(' years', ''); // Remove ' years'
            document.getElementById('edit-user-type').value = document.getElementById('user-type').textContent;
            document.getElementById('edit-diet-type').value = document.getElementById('diet-type').textContent;

            // Handle Allergies and Diseases - if they are lists, join them to comma-separated strings for input
            const allergyList = window.userProfile.allergy_info || [];
            document.getElementById('edit-allergy-info').value = allergyList.join(', ');
            const diseasesList = window.userProfile.diseases || [];
            document.getElementById('edit-diseases').value = diseasesList.join(', ');
        }


        // Function to handle form submission (Save Changes)
        saveProfileButton.addEventListener('click', (event) => {
            event.preventDefault(); // Prevent default form submission

            const profileId = urlParams.get('id'); // Get profile ID again
            if (!profileId) {
                alert('Profile ID is missing.');
                return;
            }

            const formData = new FormData(editProfileForm);
            const updatedProfileData = {};
            formData.forEach((value, key) => {
                updatedProfileData[key] = value;
            });

            // Split comma-separated strings back into lists for allergies and diseases
            updatedProfileData.allergy_info = updatedProfileData.allergy_info.split(',').map(item => item.trim()).filter(item => item); // Trim and filter empty strings
            updatedProfileData.diseases = updatedProfileData.diseases.split(',').map(item => item.trim()).filter(item => item); // Trim and filter empty strings


            fetch(`/api/profiles/${profileId}`, { // **Important: Use PUT method for updates**
                method: 'PUT', // Or PATCH, depending on your API design (PUT replaces entire resource, PATCH partially updates)
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updatedProfileData),
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(updatedUserProfile => {
                    console.log('Profile updated successfully:', updatedUserProfile);
                    alert('Profile updated successfully!'); // User feedback
                    closeModal(); // Close the modal
                    // Reload profile data to update the displayed information
                    fetchUserProfile(profileId); // Re-fetch and update the page data
                })
                .catch(error => {
                    console.error('Error updating profile:', error);
                    alert('Failed to update profile. Please try again.'); // User-friendly error message
                });
        });
    });
</script>
{% endblock scripts %}